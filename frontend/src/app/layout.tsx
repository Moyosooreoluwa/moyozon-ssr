import type { Metadata } from 'next';
// import { Montserrat } from 'next/font/google';
import { Roboto } from 'next/font/google';
import './globals.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'react-toastify/dist/ReactToastify.css';
import NavigationBar from '@/components/NavigationBar';
import { getInitialCartFromCookies } from '@/utils/getCartFromCookies';
import { StoreProvider } from '@/store/Store';
// import { cookies } from 'next/headers';

// // Define the cart structure TypeScript expects
// interface CartItem {
//   _id: string;
//   name: string;
//   quantity: number;
//   price: number;
//   image: string;
// }

// interface ShippingAddress {
//   fullName?: string;
//   address?: string;
//   city?: string;
//   postalCode?: string;
//   country?: string;
//   location?: object;
// }

// interface Cart {
//   cartItems: CartItem[];
//   shippingAddress: ShippingAddress;
//   paymentMethod: string;
// }

// const montserrat = Montserrat({
//   subsets: ['latin'],
//   weight: ['400', '700'], // Load only the required font weights
//   variable: '--font-montserrat', // CSS variable for use in Tailwind
// });
const roboto = Roboto({
  subsets: ['latin'],
  weight: ['400', '700'], // Load only the required font weights
  variable: '--font-montserrat', // CSS variable for use in Tailwind
});

export const metadata: Metadata = {
  title: 'Moyozon - E-commerce Website',
  description: 'Generated by create next app',
};

// async function getInitialCartFromCookies() :Promise<Cart>{
//   const cookieStore = await cookies(); // ⬅️ Await here
//   const cartItems = cookieStore.get('cartItems');
//   const shippingAddress = cookieStore.get('shippingAddress');
//   const paymentMethod = cookieStore.get('paymentMethod');

//   return {
//     cartItems: cartItems ? JSON.parse(cartItems.value) : [],
//     shippingAddress: shippingAddress
//       ? JSON.parse(shippingAddress.value)
//       : { location: {} },
//     paymentMethod: paymentMethod ? paymentMethod.value : '',
//   };
// }

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const initialCart = await getInitialCartFromCookies();
  return (
    <html lang="en">
      <body className={`${roboto.variable}  bg-gray-100  min-h-screen`}>
        <StoreProvider initialCart={initialCart}>
          {' '}
          <NavigationBar />
          {children}
          <footer className="text-center">Moyo 2025</footer>
        </StoreProvider>
      </body>
    </html>
  );
}
